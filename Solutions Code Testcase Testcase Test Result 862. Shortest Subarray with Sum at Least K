class Solution {
public:
        int shortestSubarray(vector<int>& nums, int K) {
        int n=nums.size();
        
        deque<int> dq;
        vector<long long> cumSum(n, 0);  

        int res=INT_MAX;
        int j=0;

        while(j<n){
            if(j==0) cumSum[j]=nums[j];
            else
                cumSum[j]=cumSum[j-1]+nums[j];
            
            if(cumSum[j]>=K) res=min(res, j+1);
            
            while(!dq.empty() && cumSum[j]-cumSum[dq.front()]>=K){
                res=min(res, j-dq.front());  
                dq.pop_front();  
            }

            while(!dq.empty() && cumSum[j]<=cumSum[dq.back()]){
                dq.pop_back();  
            }
            dq.push_back(j);
            j++;  
        }
        return res==INT_MAX ? -1:res;
    }
};
