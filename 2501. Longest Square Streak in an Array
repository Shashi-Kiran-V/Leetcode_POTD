class Solution {
public:
    long long  func(long long curr,unordered_set<long long>& st,unordered_map<long long,long long>& mp){
        if(mp.count(curr))
            return mp[curr];
        
        if(st.count(curr*curr))
            return mp[curr] = 1 + func(curr*curr,st,mp);
        return mp[curr] = 0;
    }

    int longestSquareStreak(vector<int>& nums) {
        unordered_set<long long> st(nums.begin(),nums.end());

        unordered_map<long long,long long> mp;
        long long res=-1;
        long long len;
        for(long long ele: nums){
            if(!mp.count(ele) and st.count((long long)ele*ele)){
                len = 2 + func((long long)ele*ele,st,mp);
                res = max(res,len);
            }
        }
        return res;
    }
};
