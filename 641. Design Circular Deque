class MyCircularDeque {
public:
    struct node {
        int val;
        node* next;
        node* prev;
        node(int val) {
            this->val = val;
            next = prev = NULL;
        }
    };
    node* head;
    node* tail;
    int listSize, maxSize;
    MyCircularDeque(int k) {
        maxSize = k;
        listSize = 0;
        head = tail = NULL;
    }

    bool insertFront(int value) {
        if (listSize == maxSize)
            return false;
        node* newNode = new node(value);
        if (!head) {
            head = tail = newNode;
            head->next = head;
            tail->prev = head;
        } else {
            newNode->next = head;
            head->prev = newNode;
            newNode->prev = tail;
            tail->next = newNode;
            head = newNode;
        }
        listSize++;
        return true;
    }

    bool insertLast(int value) {
        if (listSize == maxSize)
            return false;
        node* newNode = new node(value);
        if (!head) {
            head = tail = newNode;
            head->next = head;
            tail->prev = head;
        }
        else{
            tail->next=newNode;
            newNode->prev=tail;
            newNode->next=head;
            head->prev=newNode;
            tail=newNode;
        }
        listSize++;
        return true;
    }

    bool deleteFront() {
        if(listSize==0) return false;
        if(listSize==1){
            delete head;
            head=tail=NULL;
        }
        else{
            node* curr=head;
            head=head->next;
            head->prev=tail;
            tail->next=head;
            delete curr;
        }
        listSize--;
        return true;
    }

    bool deleteLast() {
        if(listSize==0) return false;
        if(listSize==1){
            delete head;
            head=tail=NULL;
        }
        else{
            node* curr=tail;
            tail=tail->prev;
            tail->next=head;
            head->prev=tail;
            delete curr;
        }
         listSize--;
        return true;
    }

    int getFront() {
        if(listSize==0) return -1;
        return head->val;
    }

    int getRear() {
        if(listSize==0) return -1;
        return tail->val;
    }

    bool isEmpty() {
        return listSize==0;
    }

    bool isFull() {
        return listSize==maxSize;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */
