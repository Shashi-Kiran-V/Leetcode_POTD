class Solution {
    #define MAX 10000000000000LL
                              
    
    long long mincost(vector<int>& robot,int robo_pos, vector<int>& factories,int fact_pos,vector<vector<long long>>& dp){
        if(robo_pos<0)  return 0;   
        if(fact_pos<0)  return MAX; 
        if(dp[robo_pos][fact_pos]!=-1) return dp[robo_pos][fact_pos];

        long long include = abs(robot[robo_pos]-factories[fact_pos])
                     + mincost(robot,robo_pos-1,factories,fact_pos-1,dp);
        
        long long exclude = mincost(robot,robo_pos,factories,fact_pos-1,dp);

        return dp[robo_pos][fact_pos] = min(include,exclude);
    }
public:
    long long minimumTotalDistance(vector<int>& robot, vector<vector<int>>& factory) {
        sort(robot.begin(),robot.end());
        sort(factory.begin(),factory.end());

        
        vector<int> factories;
        for(int i=0;i<factory.size();++i){
            int pos = factory[i][0];
            int count = factory[i][1];
            for(int j=0;j<count;++j)
                factories.push_back(pos);
        }
        vector<vector<long long>> dp(robot.size(),vector<long long>(factories.size(),-1));
        return mincost(robot,robot.size()-1,factories,factories.size()-1,dp);
    }
};
